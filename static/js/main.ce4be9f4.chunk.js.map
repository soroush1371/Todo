{"version":3,"sources":["components/Header.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Todo","state","filter","idForTodo","todos","id","title","completed","Editing","addTodo","event","key","todoInput","current","value","trim","length","setState","prevState","props","push","deleteTodo","index","splice","Check","todo","checkAll","persist","forEach","target","checked","editTodo","todosCompletecount","React","createRef","remaining","D","updateFilter","todosFiltered","anyRemaining","this","transitionName","transitionEnterTimeout","transitionLeaveTimeout","type","onKeyUp","placeholder","ref","map","onChange","onDoubleClick","style","margin","padding","autoFocus","defaultValue","onBlur","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce4be9f4.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass Header extends Component{\r\n   \r\n  \r\n    \r\n\r\n    render(){\r\n\r\n    return(\r\n        \r\n        <header className=\"header\"><h1>ToDo</h1>\r\n        </header>\r\n\r\n    );\r\n\r\n}\r\n\r\n}\r\n    \r\nexport default Header;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\n\r\nclass Todo extends Component{\r\n    state={\r\n      filter:'all',\r\n        idForTodo:2,\r\n           todos:[{\r\n                 id:1,\r\n                 title:\"finish react\",\r\n                 completed:false,\r\n                 Editing:false,\r\n           }]\r\n       }\r\n      \r\n    addTodo=event=>{\r\n        if(event.key==='Enter'){\r\n        const todoInput=this.todoInput.current.value;\r\n        if(todoInput.trim().length===0){\r\n            return;\r\n          }\r\n        this.setState((prevState,props)=>{\r\n            let todos = prevState.todos;\r\n            let idForTodo = prevState.idForTodo +1;\r\n            todos.push({\r\n              id: idForTodo,\r\n              title:todoInput,\r\n              completed:false,\r\n              Editing:false,\r\n            })\r\n            return{\r\n                todos,idForTodo\r\n            };\r\n           \r\n          });\r\n          this.todoInput.current.value='';\r\n        }}\r\n\r\n    deleteTodo=index=>{\r\n        this.setState((prevState,props)=>{\r\n          let todos =prevState.todos;\r\n         \r\n          todos.splice(index,1);\r\n          return {todos}\r\n        });\r\n        }\r\n        Check=(todo,index, event)=>{\r\n          this.setState((prevState,props)=>{\r\n            let todos = prevState.todos;\r\n            \r\n            todo.completed = !todo.completed;\r\n            \r\n            todos.splice(index,1,todo);\r\n          \r\n           \r\n            return {todos};\r\n          });\r\n          }\r\n          checkAll=(event)=>{\r\n            event.persist();\r\n            this.setState((prevState,props)=>{\r\n              let todos = prevState.todos;\r\n              \r\n            todos.forEach((todos)=> todos.completed = event.target.checked);\r\n            \r\n             \r\n              return {todos};\r\n            });\r\n            }\r\n          editTodo=(todo, index, event)=>{\r\n            this.setState((prevState,props)=>{\r\n              let todos =prevState.todos;\r\n              todo.Editing = true;\r\n              todos.splice(index, 1,todo);\r\n              return {todos}\r\n            });\r\n            }\r\n            todosCompletecount=()=>{\r\n              return this.state.todos.filter(todo=>todo.completed).length;\r\n    \r\n            }\r\n          \r\n        \r\n        todoInput = React.createRef();\r\n        remaining=()=>{\r\n          return this.state.todos.filter(todo=> !todo.completed).length;\r\n        }\r\n        D=()=>{\r\n          this.setState((prevState,props)  => {\r\n          return {todos: prevState.todos.filter(todo => !todo.completed)};\r\n          });\r\n        }\r\n       updateFilter= filter =>{\r\n          this.setState({ filter });\r\n       }\r\n       todosFiltered= () => {\r\n         if (this.state.filter==='all'){\r\n         return this.state.todos;\r\n          } else if(this.state.filter ==='active'){\r\n           return this.state.todos.filter(todo => !todo.completed);\r\n         }else if (this.state.filter ==='completed'){\r\n         return this.state.todos.filter(todo => todo.completed);\r\n       }\r\n       return this.state.todos;\r\n       }\r\n          anyRemaining=()=>{\r\n            return this.remaining() !== 0;\r\n          }\r\n    render(){\r\n        const {todo}=this.props\r\n     return(\r\n        \r\n    \r\n<section><div className=\"main\"><div></div>\r\n<ReactCSSTransitionGroup\r\n           transitionName=\"fade\"\r\n           transitionEnterTimeout={300}\r\n           transitionLeaveTimeout={300}\r\n           >\r\n<input type=\"text\" \r\n        onKeyUp={this.addTodo}\r\n        placeholder=\"what needs to be done\" className=\"new-todo\" ref={this.todoInput} onKeyUp={this.addTodo}></input>\r\n     {this.todosFiltered().map((todo,index)=>\r\n        <ui key={todo.id} className=\"todo-list\">\r\n        <li>\r\n         \r\n          <input type=\"checkbox\" className=\"toggle\" onChange={(event)=>this.Check(todo, index, event)} checked={todo.completed} />\r\n        {!todo.Editing &&\r\n         <label className={todo.completed ?'completed':'view'}\r\n         onDoubleClick={(event)=>this.editTodo(todo,index, event)}\r\n         >{todo.title}</label>}\r\n        \r\n         {todo.Editing &&\r\n         <label style={{margin:0,padding:0}}>\r\n          <input type=\"text\" className=\"new-todo\" autoFocus ref={this.todoInput} defaultValue={todo.title} onBlur={(event=>this.addTodo)} \r\n          onKeyUp={(event)=>{\r\n          if (event.key === 'Enter'){\r\n             this.addTodo(todo, index, event);\r\n          }}\r\n     } /></label>}\r\n     \r\n          <button  className=\"destroy\" onClick={(event)=>this.deleteTodo(index)}> </button>\r\n         \r\n        </li>\r\n       \r\n    \r\n      </ui>\r\n        )}\r\n      \r\n    \r\n      <h6> <input type=\"checkbox\" onChange={this.checkAll} checked={!this.anyRemaining()} />Check all</h6>\r\n      </ReactCSSTransitionGroup>\r\n      <div className=\"todo-count\">\r\n        <p>{this.remaining()} items remaining</p></div>\r\n        <div className=\"footer\"> \r\n          <button type=\"button\"  onClick={()=>this.updateFilter('all')}>All</button>\r\n          <button type=\"button\"  onClick={()=>this.updateFilter('active')}>Active</button>\r\n          <button type=\"button\" onClick={()=>this.updateFilter('completed')}>Completed</button>\r\n         <div className=\"clear-completed\">\r\n           <ReactCSSTransitionGroup\r\n           transitionName=\"fade\"\r\n           transitionEnterTimeout={300}\r\n           transitionLeaveTimeout={300}\r\n           >\r\n             \r\n         {this.todosCompletecount() > 0 &&\r\n           <div>\r\n            <button onClick={this.D}>Clear completed</button>\r\n          \r\n         \r\n          </div>}</ReactCSSTransitionGroup></div></div></div>\r\n          </section>\r\n      \r\n     )}}\r\n\r\nexport default Todo;\r\n","import React,{Component} from 'react';\nimport Header from './components/Header'\nimport './App.css';\nimport Todo from './components/Todo' \nclass App extends Component {\n \n \n  render(){\n  return (\n    <div className=\"todoapp\">\n     <Header />\n      <Todo />\n    </div>\n  );\n \n}\n\n  \n  \n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}